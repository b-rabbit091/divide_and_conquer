/*
Inversion Count for an array indicates â€“ how far (or close) the array is from being sorted. If array is already sorted then inversion count is 0. If array is sorted in reverse order that inversion count is the maximum.
Formally speaking, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j

Example:
The sequence 2, 4, 1, 3, 5 has three inversions (2, 1), (4, 1), (4, 3).
*/

public class count_inversion

{


	static int sort(int[] ar, int lt, int mid, int rt)
	{
		int n1= mid-lt+1;
		int n2= rt- mid;
		int c=0;
		int []l= new int[n1];
		int []r= new int[n2];
		for(int i=0;i<n1;i++)
			l[i]=ar[lt+i];
		for(int i=0;i<n2;i++)
			r[i]=ar[i+mid+1];

		int i=0;
		int j=0,k=lt;


		while(i<n1 && j<n2)
		{
			if(l[i]>r[j])
			{
				ar[k]=r[j];
				j++;
				c=c+ l.length-i;
				
			}
			else
			{
				ar[k]=l[i];
				i++;
				
			}
			k++;
		}

		while(i<n1)
		{
			ar[k]=l[i];
			i++;
			k++;
		}

		while(j<n2)
		{
			ar[k]=r[j];
			k++;
			j++;

		}
return c;
	}

	static int merge(int[] ar, int lt, int rt)
	{
		int mid =(lt+rt)/2;
		int c=0;
		
		if(lt<rt)
		{
			c=c+merge(ar, lt, mid);
			c=c+merge(ar,mid+1,rt);
			c=c+sort(ar,lt,mid,rt);
		}
		
		return c;

	}

	public static void main(String[] z)
	{
		int[] ar = new int[]{1,20,6,4,5};
		int res= merge(ar,0,ar.length-1);
	
			System.out.print(res);
	}
}
